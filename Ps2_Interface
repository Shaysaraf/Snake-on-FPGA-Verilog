`timescale 1ns / 1ps



module Ps2_Interface(
    input wire clk, PS2Clk, rstn, PS2Data,
    output wire [7:0] scancode,
    output wire KeyPressed,
    output wire Right, Left, Up, Down
   );
   
    reg [10:0] shift_reg;
    reg [3:0] bit_cnt;
    reg keypressed_sample;
    reg f0_received;
    reg double_press;
    reg [7:0] first_press;
    reg [7:0] passed_press;
    reg pressing;
    
       

    always@(negedge PS2Clk  or negedge rstn) begin
        if (!rstn) begin 
            shift_reg <= 11'b0;
            bit_cnt <= 4'b0;
            keypressed_sample <= 0;
            f0_received <= 0;
            double_press <= 0;
            first_press <= 8'b0;
            passed_press <= 8'b0;
            pressing <= 0;
            
        end else begin
            bit_cnt <= (bit_cnt < 4'd10)?(bit_cnt+1):0;
            shift_reg <= {PS2Data,shift_reg[9:1]}; 
            keypressed_sample <= 0;
            if (bit_cnt == 4'd10) begin
                if (shift_reg[8:1] == 8'hE0) begin
                    passed_press <= passed_press;
                    keypressed_sample <=0;
                end else if (shift_reg[8:1] == 8'hF0) begin
                    passed_press <= passed_press;
                    keypressed_sample <=0;
                    f0_received <= 1;
                end else begin
                    if (f0_received == 0) begin
                        if (double_press == 0) begin
                            if (shift_reg[8:1] == passed_press || pressing == 0) begin
                                passed_press <= shift_reg[8:1];
                                keypressed_sample <= 1 & (pressing == 0) ;
                                pressing <= 1;
                            end else begin
                                double_press <= 1;
                                first_press <= passed_press;
                                passed_press <= shift_reg[8:1];
                                keypressed_sample <= 1;
                                pressing <= 1;
                            end 
                        end else begin
                            keypressed_sample <= 0;
                        end
                    end else begin
                         f0_received <= 0;
                         if (double_press == 1) begin
                            if (shift_reg[8:1] == passed_press) begin
                                double_press <= 0;
                                passed_press <= first_press;
                            end else begin
                                double_press <= 0;
                            end
                         end else begin
                            keypressed_sample <= 0;
                            passed_press <= shift_reg[8:1];
                            pressing <= 0;
                         end
                    end
                end
            end
        end
                        
                         
    end
    
    assign KeyPressed = keypressed_sample;
    assign scancode = passed_press;
    assign Right = (scancode == 8'h74) ? 1:0;    
    assign Left = (scancode == 8'h6B) ? 1:0; 
    assign Up = (scancode == 8'h75) ? 1:0; 
    assign Down = (scancode == 8'h73) ? 1:0; 
                         
endmodule
